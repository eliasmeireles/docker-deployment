#!/bin/bash

echo "Installing Docker on $(hostname)..."

sudo apt-get update && sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    net-tools

curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# Paths to TLS certificates and key
CERT_DIR="/etc/docker/certs.d"
SERVER_CERT="${CERT_DIR}/cert.pem"
SERVER_KEY="${CERT_DIR}/key.pem"
CA_CERT="${CERT_DIR}/ca.pem"
CA_KEY="${CERT_DIR}/ca-key.pem"

# Create the certificates directory if it doesn't exist
sudo mkdir -p "${CERT_DIR}"

# Generate certificates and keys
echo "Generating certificates and keys..."

# Generate the CA certificate and key if they don't exist
if [ ! -f "${CA_CERT}" ] || [ ! -f "${CA_KEY}" ]; then
    echo 'Generating CA certificate and key...'
    sudo openssl genrsa -out "${CA_KEY}" 4096
    sudo openssl req -x509 -new -nodes -key "${CA_KEY}" -sha256 -days 3650 -out "${CA_CERT}" -subj '/CN=docker-server'
fi

# Generate the server certificate and key if they don't exist
if [ ! -f "${SERVER_CERT}" ] || [ ! -f "${SERVER_KEY}" ]; then
    echo 'Generating server certificate and key...'
    sudo openssl genrsa -out "${SERVER_KEY}" 4096

    # Create a configuration file for the CSR with SANs
    echo "[ req ]
default_bits       = 4096
distinguished_name = req_distinguished_name
req_extensions     = req_ext
[ req_distinguished_name ]
countryName                = Country Name (2 letter code)
countryName_default        = US
stateOrProvinceName        = State or Province Name (full name)
stateOrProvinceName_default = CA
localityName               = Locality Name (eg, city)
localityName_default       = San Francisco
organizationName           = Organization Name (eg, company)
organizationName_default   = Docker
commonName                 = Common Name (e.g. server FQDN or YOUR name)
commonName_default         = docker-server
[ req_ext ]
subjectAltName = @alt_names
[ alt_names ]
DNS.1 = docker-server
IP.1 = 127.0.0.1
IP.2 = $(hostname -I | awk '{print $1}')" | sudo tee ${CERT_DIR}/server-csr.cnf

    sudo openssl req -new -key "${SERVER_KEY}" -out "${CERT_DIR}/server.csr" -config ${CERT_DIR}/server-csr.cnf
    sudo openssl x509 -req -in "${CERT_DIR}/server.csr" -CA "${CA_CERT}" -CAkey "${CA_KEY}" -CAcreateserial -out "${SERVER_CERT}" -days 3650 -sha256 -extensions req_ext -extfile ${CERT_DIR}/server-csr.cnf
    sudo rm "${CERT_DIR}/server.csr"
fi

# Configure Docker on docker-server
echo "Configuring Docker on docker-server..."

# Create Docker daemon configuration file
echo '{
  "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"],
  "tlsverify": true,
  "tlscacert": "/etc/docker/certs.d/ca.pem",
  "tlscert": "/etc/docker/certs.d/cert.pem",
  "tlskey": "/etc/docker/certs.d/key.pem"
}' | sudo tee /etc/docker/daemon.json

# Modify the Docker service file to use TLS
sudo sed -i 's|-H fd://||' /lib/systemd/system/docker.service
sudo sed -i 's|-H unix:///var/run/docker.sock|-H unix:///var/run/docker.sock -H tcp://0.0.0.0:2376 --tlsverify --tlscacert=/etc/docker/certs.d/ca.pem --tlscert=/etc/docker/certs.d/cert.pem --tlskey=/etc/docker/certs.d/key.pem|' /lib/systemd/system/docker.service
sudo systemctl daemon-reload
sudo systemctl restart docker

echo "Docker installation and configuration complete."
